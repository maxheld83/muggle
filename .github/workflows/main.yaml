on:
  push:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  release:
    types: [published, created, edited]

jobs:
  build-builder:
    # this step is only necessary for this image
    name: Build and Push Builder Image
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: docker/build-push-action@v1
        with:
          # by convention, the same
          repository: ${{ github.repository }}
          dockerfile: builder.Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          # this will set "latest" if master as per https://github.com/docker/build-push-action
          tag_with_ref: true
          tag_with_sha: false
          tags: ${{ github.sha }}
          add_git_labels: true
          push: ${{ github.event_name != 'pull_request' }}
  build:
    # this could run as a second step to above, just run here as a separate step to make it easier to model other pkg off of this yaml.
    needs: build-builder
    name: Build and Push Image
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: docker/build-push-action@v1
        with:
          repository: ${{ github.repository }}/builder
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          # only necessary here
          build_args: MUGGLE_BUILTER_TAG=${{ github.sha }}
          # this will set "latest" if master as per https://github.com/docker/build-push-action
          tag_with_ref: true
          # we're relying on long shas only to keep things easy
          tag_with_sha: false
          tags: ${{ github.sha }}
          add_git_labels: true
          tags: ${{ github.sha }}
          push: ${{ github.event_name != 'pull_request' }}
  check:
    needs: build
    name: check
    runs-on: ubuntu-18.04
    # using image build above
    container: ${{ github.repository }}/builder:${{ github.sha }}
    steps:
      - uses: actions/checkout@v2
      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          rcmdcheck::rcmdcheck(args = c("--no-manual"), error_on = "error", check_dir = "check")
        shell: Rscript {0}
