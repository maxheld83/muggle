% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgdown.R
\name{build_site2}
\alias{build_site2}
\alias{build_articles2}
\alias{build_article2}
\title{Replacement versions of \code{\link[pkgdown:build_site]{pkgdown::build_site()}} etc. with muggle defaults}
\usage{
build_site2(run_dont_run = TRUE, override = list(), ...)

build_articles2(...)

build_article2(...)
}
\arguments{
\item{run_dont_run}{Run examples that are surrounded in \\dontrun?}

\item{override}{An optional named list used to temporarily override
values in \verb{_pkgdown.yml}}

\item{...}{
  Arguments passed on to \code{\link[pkgdown:build_site]{pkgdown::build_site}}, \code{\link[pkgdown:build_articles]{pkgdown::build_articles}}, \code{\link[pkgdown:build_articles]{pkgdown::build_articles}}
  \describe{
    \item{\code{pkg}}{Path to package.}
    \item{\code{examples}}{Run examples?}
    \item{\code{seed}}{Seed used to initialize so that random examples are
reproducible.}
    \item{\code{lazy}}{If \code{TRUE}, will only rebuild articles and reference pages
if the source is newer than the destination.}
    \item{\code{preview}}{If \code{TRUE}, or \code{is.na(preview) && interactive()}, will preview
freshly generated section in browser.}
    \item{\code{devel}}{Use development or deployment process?

If \code{TRUE}, uses lighter-weight process suitable for rapid
iteration; it will run examples and vignettes in the current process,
and will load code with \code{pkgload::load_all()}.

If \code{FALSE}, will first install the package to a temporary library,
and will run all examples and vignettes in a new process.

\code{build_site()} defaults to \code{devel = FALSE} so that you get high fidelity
outputs when you building the complete site; \code{build_reference()},
\code{build_home()} and friends default to \code{devel = TRUE} so that you can
rapidly iterate during development.}
    \item{\code{new_process}}{If \code{TRUE}, will run \code{build_site()} in a separate process.
This enhances reproducibility by ensuring nothing that you have loaded
in the current process affects the build process.}
    \item{\code{install}}{If \code{TRUE}, will install the package in a temporary library
so it is available for vignettes.}
    \item{\code{document}}{\strong{Deprecated} Use \code{devel} instead.}
    \item{\code{quiet}}{Set to \code{FALSE} to display output of knitr and
pandoc. This is useful when debugging.}
  }}
}
\description{
Sets some muggle defaults for pkgdown to minimize code duplication across muggle projects.
This includes overrides of \verb{_pkgdown.yml} and \verb{_site.yml}.
}
\section{Functions}{
\itemize{
\item \code{build_articles2}: build all articles

\item \code{build_article2}: build an individual article
}}

\section{Additions to pkgdown}{

These replacement versions of pkgdown functions make the following changes to pkgdown, as applicable:
\itemize{
\item If there are \verb{vignettes/}, declaring a default vignette rendering function (\code{\link[=local_siteyaml]{local_siteyaml()}})
\item Overriding some values in \verb{_pkgdown.yml} by appending \code{\link[=override_pkgdownyaml]{override_pkgdownyaml()}}) to \code{override}.
Be careful not to provide conflicting overrides.
\item Sets \code{run_dont_run = TRUE}, so that examples inside \verb{\dontrun{}} are still run inside of pkgdown.
Examples often need to be skipped on CRAN and other checks, though not when building pkgdown.
}
}

\section{YAML config - navbar}{



By default, the top navigation bar (the "navbar") will contain links to:
\itemize{
\item "Get Started", if you have an article with the same name as the package
(e.g., \code{vignettes/pkgdown.Rmd}).
\item Reference
\item Articles (i.e., vignettes, if present).
\item News (if present).
\item A "github" icon with a link to your
github repo (if listed in the \code{DESCRIPTION} url field).
}

You can override these defaults with the  \code{navbar} field. It has two primary
components: \code{structure} and \code{components}. These components interact in
a somewhat complicated way, but the complexity allows you to make minor
tweaks to part of the navbar while relying on pkgdown to automatically
generate the rest.

The \code{structure} defines the layout of the navbar, i.e. the order
of the components, and whether they're right aligned or left aligned.
You can use this component to change the order of the default components,
and to add your own components.\preformatted{navbar:
  structure:
    left:  [intro, reference, articles, tutorials, news]
    right: [github]
}

The \code{components} describes the appearance of each element in the navbar.
It uses the same
syntax as \href{https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html#site-navigation}{RMarkdown}.
The following YAML snippet illustrates some of the most important features.\preformatted{navbar:
  components:
    articles:
     text: Articles
     menu:
     - text: Category A
     - text: Title A1
       href: articles/a1.html
     - text: Title A2
       href: articles/a2.html
     - text: -------
     - text: "Category B"
     - text: Title B1
       menu:
       - text "Sub-category B11"
         href: articles/b11.html
     twitter:
       icon: "fab fa-twitter fa-lg"
       href: https://twitter.com/hadleywickham
}

Components can contain sub-\code{menu}s with headings (indicated by missing
\code{href}) and separators (indicated by a bunch of \code{-}). You can also use
\code{icon}s from \href{https://fontawesome.com/icons?d=gallery}{fontawesome}.

This yaml would override the default "articles" component,
and add a new "twitter" component. Unless you explicitly mention new
components in the \code{structure} they'll be added to the far right of the
left menu.

}

\seealso{
Other pkgdown functions: 
\code{\link{local_siteyaml}()},
\code{\link{override_pkgdownyaml}()}
}
\concept{pkgdown functions}
